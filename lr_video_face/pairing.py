# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_pairing.ipynb.

# %% auto 0
__all__ = ['get_test_pairs', 'get_valid_test_pairs_2015', 'get_valid_test_pairs', 'get_test_pairs_per_category']

# %% ../nbs/03_pairing.ipynb 3
from typing import Tuple
from sqlalchemy.orm import aliased
from collections import defaultdict

from sql_face.tables import *

# %% ../nbs/03_pairing.ipynb 5
def get_test_pairs(enfsi_years, session):

       test_pairs = (session.query(EnfsiPair)
                     .filter(EnfsiPair.second.has(EnfsiImage.year.in_(enfsi_years)))
                     .all()
                     )
       return test_pairs

# %% ../nbs/03_pairing.ipynb 6
def get_valid_test_pairs_2015(session, 
                        detector,
                        embeddingModel,
                        qualityModel) -> Tuple[EnfsiPair, FaceImage, FaceImage]:

    first_cropped_image = aliased(CroppedImage)
    second_cropped_image = aliased(CroppedImage)
    first_detector = aliased(Detector)
    second_detector = aliased(Detector)
    first_face_image = aliased(FaceImage)
    second_face_image = aliased(FaceImage)
    first_emb = aliased(EmbeddingModel)
    second_emb = aliased(EmbeddingModel)
    first_qua = aliased(QualityModel)
    second_qua = aliased(QualityModel)

    # Det&Emb
    det_id = session.query(Detector.detector_id).filter(Detector.name == detector).one()[0]
    emb_id = \
    session.query(EmbeddingModel.embeddingModel_id).filter(EmbeddingModel.name == embeddingModel).one()[0]
    qua_id = \
    session.query(QualityModel.qualityModel_id).filter(QualityModel.name == qualityModel).one()[0]

    
    query_face_img_id = session.query(CroppedImage.image_id, FaceImage, QualityImage.quality) \
        .filter(CroppedImage.detector_id == det_id, CroppedImage.face_detected == True) \
        .filter(FaceImage.croppedImage_id == CroppedImage.croppedImage_id) \
        .filter(FaceImage.embeddingModel_id == emb_id) \
        .filter(QualityImage.faceImage_id == FaceImage.faceImage_id) \
        .filter(QualityImage.qualityModel_id == qua_id).all()

    face_image_dict = defaultdict(Tuple)
    for row in query_face_img_id:
        face_image_dict[row[0]] = (row[1], row[2]) 

    query_pair_id = session.query(EnfsiPair2015)

    query_1 = query_pair_id \
        .join(first_cropped_image, EnfsiPair2015.first_id == first_cropped_image.image_id) \
        .filter(first_cropped_image.detector_id == det_id,
                first_cropped_image.face_detected == True)

    # query1 = query_1.all()

    query_2 = query_pair_id \
        .join(second_cropped_image, EnfsiPair2015.second_id == second_cropped_image.image_id) \
        .filter(second_cropped_image.detector_id == det_id,
                second_cropped_image.face_detected == True)

    # query2 = query_2.all()
    query = (query_1.intersect(query_2).all())

    # id1 = [x.enfsiPair2015_id for x in query1]
    # id2 = [x.enfsiPair2015_id for x in query2]

    # interseccion = list(set(id1).intersection(id2))

    # query = [x for x in query1 if x.enfsiPair2015_id in interseccion]

    best_pairs = []

    for x in range(17):
        comp_pairs = [(pair, min(face_image_dict[pair.first.image_id][1], face_image_dict[pair.second.image_id][1])) \
            for pair in query\
            if pair.comparison == x+1]

        comp_pairs.sort(key=lambda x:x[1], reverse=True)
        best_pairs+=comp_pairs[:int(len(comp_pairs)*1)]
        # best_pairs+=list(islice(comp_pairs, int(len(comp_pairs) * 0.25)))

        

    valid_test_pairs = [(pair[0], face_image_dict[pair[0].first.image_id][0], face_image_dict[pair[0].second.image_id][0])
                        for pair in best_pairs]
    
    return valid_test_pairs

# %% ../nbs/03_pairing.ipynb 7
def get_valid_test_pairs(session, 
                        detector,
                        embeddingModel,
                        enfsi_years) -> Tuple[EnfsiPair, FaceImage, FaceImage]:

    first_cropped_image = aliased(CroppedImage)
    second_cropped_image = aliased(CroppedImage)
    first_detector = aliased(Detector)
    second_detector = aliased(Detector)
    first_face_image = aliased(FaceImage)
    second_face_image = aliased(FaceImage)
    first_emb = aliased(EmbeddingModel)
    second_emb = aliased(EmbeddingModel)

    # Det&Emb
    det_id = session.query(Detector.detector_id).filter(Detector.name == detector).one()[0]
    emb_id = \
    session.query(EmbeddingModel.embeddingModel_id).filter(EmbeddingModel.name == embeddingModel).one()[0]

    query_face_img_id = session.query(CroppedImage.image_id, FaceImage) \
        .filter(CroppedImage.detector_id == det_id, CroppedImage.face_detected == True) \
        .filter(FaceImage.croppedImage_id == CroppedImage.croppedImage_id) \
        .filter(FaceImage.embeddingModel_id == emb_id).all()

    face_image_dict = defaultdict(FaceImage)
    for row in query_face_img_id:
        face_image_dict[row[0]] = row[1]

    query_pair_id = session.query(EnfsiPair).filter(EnfsiPair.second.has(EnfsiImage.year.in_(enfsi_years)))

    query_1 = query_pair_id \
        .join(first_cropped_image, EnfsiPair.first_id == first_cropped_image.image_id) \
        .filter(first_cropped_image.detector_id == det_id,
                first_cropped_image.face_detected == True)

    query_2 = query_pair_id \
        .join(second_cropped_image, EnfsiPair.second_id == second_cropped_image.image_id) \
        .filter(second_cropped_image.detector_id == det_id,
                second_cropped_image.face_detected == True)

    query = (query_1.intersect(query_2).all())

    valid_test_pairs = [(pair, face_image_dict[pair.first.image_id], face_image_dict[pair.second.image_id])
                        for pair in query]
    
    return valid_test_pairs

# %% ../nbs/03_pairing.ipynb 8
def get_test_pairs_per_category(session,
                                image_filters,
                                face_image_filters,
                                detector,
                                embeddingModel,
                                qualityModel,
                                enfsi_years):

    valid_test_pairs = []
    
    if 2015 in enfsi_years:
        enfsi_years.remove(2015)
        valid_test_pairs += get_valid_test_pairs_2015(session,
                                            detector,
                                            embeddingModel,
                                            qualityModel)
        
    valid_test_pairs += get_valid_test_pairs(session,
                                            detector,
                                            embeddingModel,
                                            enfsi_years)
    
    

    test_categories = [
        row[0].get_category(image_filters, face_image_filters, detector, embeddingModel)
        for row in valid_test_pairs]

    test_pairs_per_category = defaultdict(list)

    for row_enfsi_pair, category in zip(valid_test_pairs, test_categories):
        test_pairs_per_category[category].append(row_enfsi_pair)
    return test_pairs_per_category
