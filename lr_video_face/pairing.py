# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_pairing.ipynb.

# %% auto 0
__all__ = ['get_test_pairs', 'get_valid_test_pairs', 'get_test_pairs_per_category']

# %% ../nbs/03_pairing.ipynb 3
from typing import Tuple
from sqlalchemy.orm import aliased
from collections import defaultdict

from sql_face.tables import *

# %% ../nbs/03_pairing.ipynb 5
def get_test_pairs(enfsi_years, session):

       test_pairs = (session.query(EnfsiPair)
                     .filter(EnfsiPair.second.has(EnfsiImage.year.in_(enfsi_years)))
                     .all()
                     )
       return test_pairs

# %% ../nbs/03_pairing.ipynb 6
def get_valid_test_pairs(session, 
                        detector,
                        embeddingModel,
                        enfsi_years) -> Tuple[EnfsiPair, FaceImage, FaceImage]:

    first_cropped_image = aliased(CroppedImage)
    second_cropped_image = aliased(CroppedImage)
    first_detector = aliased(Detector)
    second_detector = aliased(Detector)
    first_face_image = aliased(FaceImage)
    second_face_image = aliased(FaceImage)
    first_emb = aliased(EmbeddingModel)
    second_emb = aliased(EmbeddingModel)

    # Det&Emb
    det_id = session.query(Detector.detector_id).filter(Detector.name == detector).one()[0]
    emb_id = \
    session.query(EmbeddingModel.embeddingModel_id).filter(EmbeddingModel.name == embeddingModel).one()[0]

    query_face_img_id = session.query(CroppedImage.image_id, FaceImage) \
        .filter(CroppedImage.detector_id == det_id, CroppedImage.face_detected == True) \
        .filter(FaceImage.croppedImage_id == CroppedImage.croppedImage_id) \
        .filter(FaceImage.embeddingModel_id == emb_id).all()

    face_image_dict = defaultdict(FaceImage)
    for row in query_face_img_id:
        face_image_dict[row[0]] = row[1]

    query_pair_id = session.query(EnfsiPair).filter(EnfsiPair.second.has(EnfsiImage.year.in_(enfsi_years)))

    query_1 = query_pair_id \
        .join(first_cropped_image, EnfsiPair.first_id == first_cropped_image.image_id) \
        .filter(first_cropped_image.detector_id == det_id,
                first_cropped_image.face_detected == True)

    query_2 = query_pair_id \
        .join(second_cropped_image, EnfsiPair.second_id == second_cropped_image.image_id) \
        .filter(second_cropped_image.detector_id == det_id,
                second_cropped_image.face_detected == True)

    query = (query_1.intersect(query_2).all())

    valid_test_pairs = [(pair, face_image_dict[pair.first.image_id], face_image_dict[pair.second.image_id])
                        for pair in query]
    
    return valid_test_pairs

# %% ../nbs/03_pairing.ipynb 7
def get_test_pairs_per_category(session,
                                image_filters,
                                face_image_filters,
                                detector,
                                embeddingModel,
                                enfsi_years):
        
    valid_test_pairs = get_valid_test_pairs(session,
                                            detector,
                                            embeddingModel,
                                            enfsi_years)
    

    test_categories = [
        row[0].get_category(image_filters, face_image_filters, detector, embeddingModel)
        for row in valid_test_pairs]

    test_pairs_per_category = defaultdict(list)

    for row_enfsi_pair, category in zip(valid_test_pairs, test_categories):
        test_pairs_per_category[category].append(row_enfsi_pair)
    return test_pairs_per_category
